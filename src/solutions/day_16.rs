use std::collections::HashSet;

#[derive(Clone, Copy)]
struct Beam {
    location: (i32, i32),
    direction: (i32, i32),
    num_rows: i32,
    num_cols: i32,
}

impl Beam {
    fn new(location: (i32, i32), direction: (i32, i32), num_rows: i32, num_cols: i32) -> Self {
        Self {
            location,
            direction,
            num_rows,
            num_cols,
        }
    }

    fn is_inbounds(self) -> bool {
        let new_row = self.location.0;
        let new_col = self.location.1;
        new_row >= 0 && new_row < self.num_rows && new_col >= 0 && new_col < self.num_cols
    }

    fn new_directions(mut self, ch: char) -> Vec<Self> {
        let mut ret = match ch {
            '.' => vec![self],
            '\\' => {
                (self.direction.0, self.direction.1) = (self.direction.1, self.direction.0);
                vec![self]
            }
            '/' => {
                (self.direction.0, self.direction.1) = (-self.direction.1, -self.direction.0);
                vec![self]
            }
            '-' => {
                if self.direction.0 == 0 {
                    vec![self]
                } else {
                    let left = Self::new(self.location, (0, -1), self.num_rows, self.num_cols);
                    let right = Self::new(self.location, (0, 1), self.num_rows, self.num_cols);
                    vec![left, right]
                }
            }
            '|' => {
                if self.direction.1 == 0 {
                    vec![self]
                } else {
                    let up = Self::new(self.location, (-1, 0), self.num_rows, self.num_cols);
                    let down = Self::new(self.location, (1, 0), self.num_rows, self.num_cols);
                    vec![up, down]
                }
            }
            _ => vec![],
        };
        ret.iter_mut().fold(Vec::new(), |mut acc, b| {
            b.location.0 += b.direction.0;
            b.location.1 += b.direction.1;
            if b.is_inbounds() {
                acc.push(*b);
            }
            acc
        })
    }
}

fn solve(init: (i32, i32), dir: (i32, i32)) -> usize {
    let input = r#"\|...../.......-....\......./\........|............/..........\..............-....|-................../...-...
...................|../...../..............................|....................-....|..\.................../.
.......................\....--.........../..................|..............\........./..-...........|.........
-..........-......|...\.-..........................-......|......./|....\.-.........../-.................-../.
..................................................-./..........-.................................|.......|....
.\..-...-......\...................\..............|....\\...........|..........|...........|...../............
........-.....|............\......\/............./..-............................/.......|.-........-.........
\......\.......|.........||............/\....................-..\..-.....-.|/.............-......../.....-.\/.
.........\..|.............................../.|.........-.....................|................./.....\-./\...
.......................\............|./|....................--.\............................-........-\.../\..
...........|................/..............|..\.......|.......\................................-..\.......|-..
-..\.......-\....|................\........../................\.|.\.........\-.........-........\.........|...
\-.........-.............|--/....................\/..........\.../.....\............|..........|..............
..|.../........../................................................................................../.-.......
................-...|.............-.......................|................../.......\............|...|.\.....
.......\\....................../..../.............\.................................|......\........./........
.|...........-..|................/.............\........\.\.......-.......|..............................\....
....\.....-............/....../......|........|........-...........|..|.......\.....-.-.\.../.........../...\.
..........-........................|......-....................-................/............/..../...........
...............|.......|........-...../.....-..............-................................../.............-.
............\........-|......|.............././............/................................-..../.......\....
-.............\......................./|.........../....................\.\..........-....|...........-.....\.
.....\..............................|..\\.....|....|.....\/.........................|................/........
...........................\..|......................../...........-..../|\.\.............-.........\|.......-
......\/........-.\.....\............\..................../.....\....\....\...\..............|.....-..........
..|...-|.../.....-....|./......\../|................\................|...........................-.......-....
/.|............|...-..-.........................................-../|...-.|......................\............
/............../...../...--.........................../....................|..................-......./.......
.-..........-..-......../..\./..../......................|.......\....-............../-.......................
.....................\.........../............./...............................................|..............
.......................................\..-.............\..|....................\.....................\....-..
................./.........\.............................-......./.......\......................../...../.....
...-...........-..................||.........\.\........................................|........|-.....|.....
................\.....|...............................|..-..|../...........-.....-.......|....................
........|.......|.....\.|.../.................\.....././......-.-...\.......-....-.......|.........-..........
..\..-.....\...-.../...............\.|.\.......................................\..............|..........|.-..
...............\................|...............\.\........\..|...........................|..........|........
......................................|/.\................................./...............................//.
........./............-.............\....................-..............-......-..........\|............-.....
|....|.-/...............-..|..|/....|/..../........|.....-......../...................\..../......./..........
....|..........................|./....../.........|...................................\.............-.........
.........../.......................................\......\........./-.............../......../.-.........-...
......|..../........\...........|......-.......\...\......../............|............-.............|.........
..........|....|......\.......\../.../.....|...\/.........\...|.....\................./.|..-..............|...
.............|........................../........................./.......|......../.-.................\......
...-..../................|.......................-../...................\...//|........................|..\.|.
.....\..................\..|.........................|.\.........................|.../.....-.\................
......./.\.....-............-.-..............-.........................../|.................\.......\.........
....|........\........-...........-..../\......-.....\........-......................./...|...................
................\........../.....\.|.....-........|.....\..................................../.............|..
...................|..../...|........\............\........./....-............\.......|.......................
....|...............|.........|......|............-.........|..|../........-................-......\....\.....
.......-./..|..|...../|............|...-...........|....\...........-...........|.........|..-|..|\...........
...-............\.....-..........-................./.-.../..........\..\..|................................\..
./.|.........................-............|..........|.................\.........-.........................\..
............/.........\.............-..........-....|......../|.........../....\...............|..|...........
.-......\.......\................................./..-........-....................-....\...|...\.....|....|..
|./...........|.......-........../............\...................................|-.........\............\-..
............|.........-....-.....|.....|.................../|../.........\.............../.......-.../........
........./..................\...\.....................\..-....................................--..............
........................./....\./............./......-.../...................../......-......|...-..-/..\.....
....--..................../|....|.-................|.../....................-........././............-../.....
............|..........|......\..........\..................................../...............|..../......|...
.......-..........-.....\..........|......|............\./...................../.....-......../......../......
/..................|................||.-............/............|............................../\............
.....|................\-..............\.|......................\..................................|...........
...............|................/..................../............../.........\.............................|.
-......|....-...-....-.............|...............|....|\.....-..........-..........\........................
..............-./.............|.........-..\..-.....-...............-...-.....................................
.......................||.............-.........\................../.\....\.............................../...
..-./...-.........-...................|............................|........................................-.
.-..\...........\.............\.................|.\................../........-..............-................
........-.......//................................./..................../.......\..\..........................
............../..........|..................../..........|../.....................|......-........-...........
/........-...............................|.......-\..........-...-.../......\...|\...-..................\.....
...\\|...........||......................\..../.../......|..........|...............|....--....-..............
-./..................|............................\................|.-................\......-.-..............
....\.\.|.......|..................-....../.../........../.|....-......................./....\...........-.\..
/.......\.......\....../......../...............\...|....../..........\........../............./....../.......
/.\.................|..|..\.............../......./|...........\......-./\...........|.................\...|..
....../........|.....-....-........\......|-./...-..........................-..-.....\/.....................\.
................................/.....|....|.../..........................................|.........\.........
............./...........|......\......./../..-.............|....\........\.....|..-.......-..........-.....-.
.....|..-.........................|.|................../............\.........\.............../..-.......\....
....................|...../...................\........\...../|............/..................................
.....................................|\......./...|...../|............./....-..............\..................
|........\\.............../.|....-../../../..........-\.........-......\.........-............-...../\........
...\.../................-......................-...........-...-............................|./............/..
|........../\.|....\..\......................\...|........................./..-......................\........
............\.....\.....\............|..|.......................|/...........-...../....................-.....
..|..........|-......|........................-..............\..............\......|.....|-/.......-..........
.......................................-..................|........................................\........-.
..../..|....-.............................|......|\-.........../.......\.......\.\........................|\..
.......-...-..\......../.../...........-...................../.../.......................-..................-.
\............./.....-..\.....................|.............-....||.....................-........-.............
../........-............/.....|./.\/.../.................-...|/..................-.../..............\....-./..
..\.........................-................../....|.......................................................-.
.............................|......-../......|../............/\|./|..../../.......-.......-...\....|......./.
/.........-./.../..\|\|......|............./...|............/..../............../.........................-./.
.-...........|-....\/.\........../.....-.................--\...|.............../..|-.........../..............
......-.........|............./............/...........\..............-../................./\.....-..../......
.........-.................................../../|.|...........|.......-....................|....|............
.........../....../\.-...................................|..........|\.-......................................
/..../................................/.........-....\/.....///...|.......\.\....|.....\...|.-./.........-....
..............................\\........../.....-.....|.//.|............|............./....-........\.........
......|......-.........|....././|......-/.............-.................................../..|-............./.
........|....................../...|...|....\.....//...../.\............/.../................................/
.....................-...........-..\........|/.......\......\...\....-..-...........-|.....\..........\..-|..
./..|..................................................................-..-.-............../..................
......../........................\|.........../.../........\..............\.....-....\..../..\................"#.lines().map(|s| s.chars().collect::<Vec<char>>()).collect::<Vec<Vec<char>>>();

    let num_rows = input.len();
    let num_cols = input[0].len();

    let mut beams: Vec<Beam> = vec![Beam::new(init, dir, num_rows as i32, num_cols as i32)];
    let mut memo: HashSet<((i32, i32), (i32, i32))> = HashSet::new();
    let mut seen: HashSet<(i32, i32)> = HashSet::new();

    while let Some(b) = beams.pop() {
        seen.insert(b.location);
        if memo.insert((b.location, b.direction)) {
            let c = input[b.location.0 as usize][b.location.1 as usize];
            beams.append(&mut b.new_directions(c));
        }
    }

    seen.len()
}

pub fn main() {
    let part_one = solve((0, 0), (0, 1));
    println!("part one {part_one}");

    let mut part_two = 0;

    for i in 0..110 {
        let maybe = solve((i, 0), (0, 1));
        part_two = part_two.max(maybe);
        let maybe = solve((i, 109), (0, -1));
        part_two = part_two.max(maybe);
        let maybe = solve((0, i), (1, 0));
        part_two = part_two.max(maybe);
        let maybe = solve((109, i), (-1, 0));
        part_two = part_two.max(maybe);
    }

    println!("part two {part_two}")
}
